package gov.cdc.izgw.v2tofhir.segment;

import java.util.ArrayList;
import java.util.List;

import org.hl7.fhir.instance.model.api.IBaseResource;
import org.hl7.fhir.r4.model.Parameters;
import org.hl7.fhir.r4.model.Parameters.ParametersParameterComponent;
import org.hl7.fhir.r4.model.PositiveIntType;
import org.hl7.fhir.r4.model.Quantity;
import org.hl7.fhir.r4.model.StringType;
import org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent;
import org.hl7.fhir.r4.model.Bundle.BundleEntryResponseComponent;

import gov.cdc.izgw.v2tofhir.annotation.ComesFrom;
import gov.cdc.izgw.v2tofhir.annotation.Produces;
import gov.cdc.izgw.v2tofhir.converter.MessageParser;
import lombok.extern.slf4j.Slf4j;

/**
 * The RCP Parser updates the Parameters resource generated by the QPDParser to include the
 * count of records requested.
 *
 * @author Audacious Inquiry
 *
 */
@Produces(segment="RCP", resource=Parameters.class)
@Slf4j
public class RCPParser extends AbstractSegmentParser {
	private Parameters params;
	private static List<FieldHandler> fieldHandlers = new ArrayList<>();
	static {
		log.debug("{} loaded", RCPParser.class.getName());
	}
	/**
	 * Construct a new QPD Parser for the given messageParser.
	 * 
	 * @param messageParser The messageParser using this QPDParser
	 */
	public RCPParser(MessageParser messageParser) {
		super(messageParser, "RCP");
		if (fieldHandlers.isEmpty()) {
			initFieldHandlers(this, fieldHandlers);
		}
	}
	
	@Override
	public List<FieldHandler> getFieldHandlers() {
		return fieldHandlers;
	}
	
	public IBaseResource setup() {
		params = getFirstResource(Parameters.class);
		return params;
	}
	
	/*
		FIELD	LENGTH	DATA TYPE	OPTIONALITY	REPEATABILITY	TABLE	
		RCP.1 - Query Priority	1	ID	O	-	0091	
		RCP.2 - Quantity Limited Request	0	CQ	O	-		
		RCP.3 - Response Modality	0	CNE	O	-	0394	
		RCP.4 - Execution And Delivery Time	0	DTM	C	-		
		RCP.5 - Modify Indicator	1	ID	O	-	0395	
		RCP.6 - Sort-by Field	0	SRT	O	∞		
		RCP.7 - Segment Group Inclusion	256	ID	O	∞	0391	 
	 */
	/**
	 * Set the count parameter on the search.
	 * Update the search on params and the Bundle.entry.request component with the count.
	 * @param quantityLimitedRequest	The count.
	 */
	@ComesFrom(path = "Params.count", field = 2, comment = "Quantity Limited Request")
	public void setQuantityLimitedRequest(Quantity quantityLimitedRequest) {
		PositiveIntType count = new PositiveIntType(quantityLimitedRequest.getValue().intValue());
		params.addParameter().setName("_count").setValue(count);
		ParametersParameterComponent search = params.getParameter("_search");
		String countQueryParam = "&_count=" + count.getValueAsString();
		// Update anyplace the _search was stored with the count.
		if (search != null && search.getValue() instanceof StringType s) {
			s.setValue(s.getValue() + countQueryParam);
		}
		BundleEntryRequestComponent req = (BundleEntryRequestComponent) params.getUserData(BundleEntryRequestComponent.class.getName());
		if (req != null && req.hasUrl()) {
			req.setUrl(req.getUrl() + countQueryParam);
		}
		BundleEntryResponseComponent resp = (BundleEntryResponseComponent) params.getUserData(BundleEntryResponseComponent.class.getName());
		if (resp != null && resp.hasLocation()) {
			resp.setLocation(resp.getLocation() + countQueryParam);
		}
	}
}
